{"version":3,"sources":["webpack:///./src/components/pages/slices/ManageSlice.vue?a3cb","webpack:///./src/mixins/Slices.js","webpack:///src/components/pages/slices/ManageSlice.vue","webpack:///./src/components/pages/slices/ManageSlice.vue?a0bc","webpack:///./src/components/pages/slices/ManageSlice.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","staticClass","on","cancelManageSlice","scopedSlots","_u","key","fn","_v","proxy","managedSlice","type","$event","modelQueries","length","_e","step","model","value","callback","$$v","modelQuery","expression","$set","mode","addSlice","modelQueryInvalid","nextStep","editSlice","staticRenderFns","methods","buildSliceDirectoryOptions","options","directory","files","name","i","directories","Object","assign","computed","sliceDirectoriesOptions","slicesDirectories","slice","params","components","AdminContainer","QuerySelector","SliceSelector","FileTextIcon","DatabaseIcon","mixins","Slices","props","String","default","required","data","modelQueryFormatted","modelQueryConfig","forEach","param","allowedNull","mq","mqc","mounted","defaultInsertSlice","getModelQueries","getSlicesDirectories","$nextTick","$emit","buildSlice","settings","enabled","metadata","instance_id","label","model_query","component","view","has_child_slot","fields","field","finalSlice","addMissingProperty","setDefaults","defaults","text","url","target","color","checked","d","removeSlice"],"mappings":"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","file":"js/chunk-2d0d6f55.df129d33.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('portal',{attrs:{\"to\":\"devise-root\"}},[_c('div',{staticClass:\"dvs-fixed dvs-inset-0 dvs-flex dvs-justify-center dvs-items-center dvs-z-40\"},[_c('div',{staticClass:\"dvs-blocker\",on:{\"click\":_vm.cancelManageSlice}})]),_c('div',{staticClass:\"relative dvs-z-50 dvs-w-full dvs-pt-6\"},[_c('admin-container',{scopedSlots:_vm._u([{key:\"message\",fn:function(){return [_vm._v(\" Adding new slices builds up your page. Below you will find the settings that will effect what template to use and if it is static or dynamic. \")]},proxy:true},{key:\"content\",fn:function(){return [_c('div',{staticClass:\"dvs-w-full dvs-relative dvs-z-40\"},[_c('div',{staticClass:\"dvs-p-8\"},[_c('transition',{attrs:{\"name\":\"dvs-fade\"}},[(_vm.managedSlice.type === null)?_c('div',{staticClass:\"dvs-flex dvs-justify-between dvs-items-stretch dvs-w-full\"},[_c('div',{staticClass:\"\\n                      dvs-btn\\n                      dvs-btn-secondary\\n                      dvs-text-base\\n                      dvs-mr-4\\n                      dvs-p-8\\n                      dvs-w-1/2\\n                      dvs-shadow-lg\\n                    \",on:{\"click\":function($event){_vm.managedSlice.type = 'single'}}},[_c('div',{staticClass:\"dvs-pb-2\"},[_vm._v(\"Static Slice\")]),_c('div',{staticClass:\"dvs-text-4xl dvs-mb-4 dvs-flex dvs-justify-center\"},[_c('file-text-icon')],1),_c('p',{staticClass:\"\\n                        dvs-normal-case dvs-text-sm dvs-text-admin-secondary-fg dvs-font-normal\\n                      \"},[_vm._v(\" A static slice contains information that content managers enter and is presented on the site. The content does not change until a content manager chooses to edit. \")])]),(_vm.modelQueries.length > 0)?_c('div',{staticClass:\"\\n                      dvs-btn\\n                      dvs-btn-secondary\\n                      dvs-text-base\\n                      dvs-ml-4\\n                      dvs-p-8\\n                      dvs-w-1/2\\n                      dvs-shadow-lg\\n                    \",on:{\"click\":function($event){_vm.managedSlice.type = 'model'}}},[_c('div',{staticClass:\"dvs-pb-2\"},[_vm._v(\"Dynamic Slice\")]),_c('div',{staticClass:\"dvs-text-4xl dvs-mb-4 dvs-flex dvs-justify-center\"},[_c('database-icon')],1),_c('p',{staticClass:\"\\n                        dvs-normal-case dvs-text-sm dvs-text-admin-secondary-fg dvs-font-normal\\n                      \"},[_vm._v(\" Dynamic slices will be populated by data from the database. Depending on your options on the next screen multiple instances of the slice you select will appear. As models are edited the information on these instances will change. \")])]):_vm._e()]):_c('div',[(_vm.step === 1 && _vm.managedSlice.type === 'model')?_c('div',[_c('div',{staticClass:\"dvs-mb-16\"},[(_vm.modelQueries.length > 0)?_c('query-selector',{model:{value:(_vm.modelQuery),callback:function ($$v) {_vm.modelQuery=$$v},expression:\"modelQuery\"}}):_vm._e()],1)]):_c('div',[_c('div',{staticClass:\"dvs-mb-16\"},[_c('slice-selector',{attrs:{\"model-query\":_vm.modelQuery},model:{value:(_vm.managedSlice.slice),callback:function ($$v) {_vm.$set(_vm.managedSlice, \"slice\", $$v)},expression:\"managedSlice.slice\"}})],1)])])])],1)]),(_vm.managedSlice.type !== null)?_c('div',{staticClass:\"\\n              dvs-fixed\\n              dvs-z-40\\n              dvs-bottom-0\\n              dvs-right-0\\n              dvs-mr-1\\n              dvs-mb-4\\n              dvs-mr-10\\n              dvs-text-xs\\n              dvs-z-10\\n              dvs-p-6\\n              dvs-bg-admin-bg\\n              dvs-text-admin-fg\\n              dvs-rounded\\n              dvs-shadow\\n              dvs-px-6\\n            \"},[(_vm.mode === 'inserting' && _vm.managedSlice.type !== 'model')?_c('button',{staticClass:\"dvs-btn dvs-btn-primary dvs-mr-2\",on:{\"click\":_vm.addSlice}},[_vm._v(\" Insert \")]):(_vm.managedSlice.type === 'model' && _vm.step === 1)?_c('button',{staticClass:\"dvs-btn dvs-btn-primary dvs-mr-2\",attrs:{\"disabled\":_vm.modelQueryInvalid},on:{\"click\":_vm.nextStep}},[_vm._v(\" Next \")]):(_vm.mode === 'inserting' && _vm.managedSlice.type === 'model' && _vm.step === 2)?_c('button',{staticClass:\"dvs-btn dvs-btn-primary dvs-mr-2\",on:{\"click\":_vm.addSlice}},[_vm._v(\" Insert Model Slice \")]):_c('button',{staticClass:\"dvs-btn dvs-btn-primary dvs-mr-2\",on:{\"click\":_vm.editSlice}},[_vm._v(\" Replace \")]),_c('button',{staticClass:\"dvs-btn dvs-btn-secondary\",on:{\"click\":_vm.cancelManageSlice}},[_vm._v(\"Cancel\")])]):_vm._e()]},proxy:true}])})],1)])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export default {\n  methods: {\n    buildSliceDirectoryOptions(options, directory) {\n      if (directory.files.length > 0) {\n        options[directory.name] = []\n        options[directory.name] = directory.files\n      }\n\n      for (let i = 0; i < directory.directories.length; i + 1) {\n        options = Object.assign(\n          {},\n          options,\n          this.buildSliceDirectoryOptions(options, directory.directories[i])\n        )\n      }\n\n      return options\n    },\n  },\n  computed: {\n    sliceDirectoriesOptions() {\n      let options = {}\n      if (\n        this.slicesDirectories.files &&\n        (this.slicesDirectories.files.length > 0 || this.slicesDirectories.directories.length > 0)\n      ) {\n        options = this.buildSliceDirectoryOptions(options, this.slicesDirectories)\n      }\n      return options\n    },\n  },\n}\n","<template>\n  <div>\n    <portal to=\"devise-root\">\n      <div class=\"dvs-fixed dvs-inset-0 dvs-flex dvs-justify-center dvs-items-center dvs-z-40\">\n        <div class=\"dvs-blocker\" @click=\"cancelManageSlice\"></div>\n      </div>\n\n      <div class=\"relative dvs-z-50 dvs-w-full dvs-pt-6\">\n        <admin-container>\n          <template v-slot:message>\n            Adding new slices builds up your page. Below you will find the settings that will effect\n            what template to use and if it is static or dynamic.\n          </template>\n          <template v-slot:content>\n            <div class=\"dvs-w-full dvs-relative dvs-z-40\">\n              <div class=\"dvs-p-8\">\n                <transition name=\"dvs-fade\">\n                  <!-- Choose the type of the slice -->\n                  <div\n                    v-if=\"managedSlice.type === null\"\n                    class=\"dvs-flex dvs-justify-between dvs-items-stretch dvs-w-full\"\n                  >\n                    <div\n                      class=\"\n                        dvs-btn\n                        dvs-btn-secondary\n                        dvs-text-base\n                        dvs-mr-4\n                        dvs-p-8\n                        dvs-w-1/2\n                        dvs-shadow-lg\n                      \"\n                      @click=\"managedSlice.type = 'single'\"\n                    >\n                      <div class=\"dvs-pb-2\">Static Slice</div>\n                      <div class=\"dvs-text-4xl dvs-mb-4 dvs-flex dvs-justify-center\">\n                        <file-text-icon></file-text-icon>\n                      </div>\n                      <p\n                        class=\"\n                          dvs-normal-case dvs-text-sm dvs-text-admin-secondary-fg dvs-font-normal\n                        \"\n                      >\n                        A static slice contains information that content managers enter and is\n                        presented on the site. The content does not change until a content manager\n                        chooses to edit.\n                      </p>\n                    </div>\n\n                    <div\n                      v-if=\"modelQueries.length > 0\"\n                      class=\"\n                        dvs-btn\n                        dvs-btn-secondary\n                        dvs-text-base\n                        dvs-ml-4\n                        dvs-p-8\n                        dvs-w-1/2\n                        dvs-shadow-lg\n                      \"\n                      @click=\"managedSlice.type = 'model'\"\n                    >\n                      <div class=\"dvs-pb-2\">Dynamic Slice</div>\n                      <div class=\"dvs-text-4xl dvs-mb-4 dvs-flex dvs-justify-center\">\n                        <database-icon></database-icon>\n                      </div>\n                      <p\n                        class=\"\n                          dvs-normal-case dvs-text-sm dvs-text-admin-secondary-fg dvs-font-normal\n                        \"\n                      >\n                        Dynamic slices will be populated by data from the database. Depending on\n                        your options on the next screen multiple instances of the slice you select\n                        will appear. As models are edited the information on these instances will\n                        change.\n                      </p>\n                    </div>\n                  </div>\n\n                  <!-- Slice Selector -->\n                  <div v-else>\n                    <div v-if=\"step === 1 && managedSlice.type === 'model'\">\n                      <div class=\"dvs-mb-16\">\n                        <query-selector v-if=\"modelQueries.length > 0\" v-model=\"modelQuery\" />\n                      </div>\n                    </div>\n                    <div v-else>\n                      <div class=\"dvs-mb-16\">\n                        <slice-selector v-model=\"managedSlice.slice\" :model-query=\"modelQuery\" />\n                      </div>\n                    </div>\n                  </div>\n                </transition>\n              </div>\n            </div>\n            <div\n              v-if=\"managedSlice.type !== null\"\n              class=\"\n                dvs-fixed\n                dvs-z-40\n                dvs-bottom-0\n                dvs-right-0\n                dvs-mr-1\n                dvs-mb-4\n                dvs-mr-10\n                dvs-text-xs\n                dvs-z-10\n                dvs-p-6\n                dvs-bg-admin-bg\n                dvs-text-admin-fg\n                dvs-rounded\n                dvs-shadow\n                dvs-px-6\n              \"\n            >\n              <button\n                v-if=\"mode === 'inserting' && managedSlice.type !== 'model'\"\n                class=\"dvs-btn dvs-btn-primary dvs-mr-2\"\n                @click=\"addSlice\"\n              >\n                Insert\n              </button>\n              <button\n                v-else-if=\"managedSlice.type === 'model' && step === 1\"\n                class=\"dvs-btn dvs-btn-primary dvs-mr-2\"\n                :disabled=\"modelQueryInvalid\"\n                @click=\"nextStep\"\n              >\n                Next\n              </button>\n              <button\n                v-else-if=\"mode === 'inserting' && managedSlice.type === 'model' && step === 2\"\n                class=\"dvs-btn dvs-btn-primary dvs-mr-2\"\n                @click=\"addSlice\"\n              >\n                Insert Model Slice\n              </button>\n              <button v-else class=\"dvs-btn dvs-btn-primary dvs-mr-2\" @click=\"editSlice\">\n                Replace\n              </button>\n              <button class=\"dvs-btn dvs-btn-secondary\" @click=\"cancelManageSlice\">Cancel</button>\n            </div>\n          </template>\n        </admin-container>\n      </div>\n    </portal>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapState, mapActions } from 'vuex'\nimport SlicesMixin from '../../../mixins/Slices'\n\nconst defaultInsertSlice = {\n  type: null,\n  slice: null,\n  modelQuery: {\n    key: null,\n    params: [],\n  },\n}\n\nexport default {\n  name: 'ManageSlice',\n\n  components: {\n    AdminContainer: () => import('../../admin/ui/AdminContainer'),\n    QuerySelector: () => import('../../utilities/query-selector/QuerySelector.vue'),\n    SliceSelector: () => import('./SliceSelector.vue'),\n    FileTextIcon: () => import('vue-feather-icons/icons/FileTextIcon'),\n    DatabaseIcon: () => import('vue-feather-icons/icons/DatabaseIcon'),\n  },\n  mixins: [SlicesMixin],\n  props: {\n    value: {\n      type: Object | String /* eslint-disable-line */,\n      default: () => {},\n    },\n    mode: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      managedSlice: {},\n      step: 1,\n      modelQuery: {\n        key: null,\n        params: [],\n      },\n    }\n  },\n  computed: {\n    ...mapGetters('devise', ['componentFromView']),\n    ...mapState('devise', ['modelQueries']),\n    slice() {\n      return Object.assign({}, this.value)\n    },\n    modelQueryFormatted() {\n      if (this.modelQuery && this.modelQuery.key) {\n        return this.modelQuery\n      }\n      return null\n    },\n    modelQueryInvalid() {\n      if (!this.modelQueryConfig) {\n        return true\n      }\n      this.modelQueryConfig.params.forEach((param) => {\n        if (!param.allowedNull && !param.value) {\n          return true\n        }\n        return false\n      })\n      return false\n    },\n    modelQueryConfig() {\n      if (this.modelQuery) {\n        const mqc = this.modelQueries.find((mq) => {\n          return mq.key === this.modelQuery.key\n        })\n        return mqc\n      }\n      return null\n    },\n  },\n  mounted() {\n    this.managedSlice = Object.assign({}, defaultInsertSlice)\n    this.getModelQueries()\n    this.getSlicesDirectories()\n\n    this.$nextTick(() => {\n      // If slice is set it's an edit\n      if (this.slice && this.slice.metadata) {\n        this.managedSlice.type = this.slice.metadata.type\n        this.modelQuery = JSON.parse(JSON.stringify(this.slice.metadata.model_query))\n      }\n    })\n  },\n  methods: {\n    ...mapActions('devise', ['getModelQueries', 'getSlicesDirectories', 'getModelSettings']),\n    cancelManageSlice() {\n      this.$set(this, 'managedSlice', defaultInsertSlice)\n      this.$emit('cancel')\n    },\n    buildSlice() {\n      const component = this.componentFromView(this.managedSlice.slice.value)\n      const finalSlice = {\n        settings: {\n          enabled: true,\n        },\n        metadata: {\n          instance_id: 0,\n          label: this.managedSlice.slice.name,\n          model_query: this.modelQueryFormatted,\n          name: component.name,\n          type: this.managedSlice.type,\n          view: component.view,\n          has_child_slot: component.has_child_slot,\n        },\n      }\n\n      for (const field in component.fields) {\n        if (component.fields[field]) {\n          const defaults = component.fields[field].default\n          finalSlice[field] = {}\n          this.addMissingProperty(finalSlice, field)\n          this.setDefaults(finalSlice, field, defaults)\n        }\n      }\n      return Object.assign({}, finalSlice)\n    },\n    addMissingProperty(slice, field) {\n      // We just add all the properties because.... why not?\n      this.$set(slice, field, {\n        text: null,\n        url: null,\n        target: null,\n        color: null,\n        checked: null,\n        enabled: null,\n      })\n    },\n    setDefaults(slice, field, defaults) {\n      // loop through the defaults and apply them to the field\n      for (const d in defaults) {\n        if (defaults[d]) {\n          this.$set(slice[field], d, defaults[d])\n        }\n      }\n    },\n    nextStep() {\n      this.step += 1\n    },\n    addSlice() {\n      this.$emit('addSlice', this.buildSlice())\n    },\n    editSlice() {\n      this.$emit('input', Object.assign({}, this.buildSlice()))\n    },\n    removeSlice() {\n      this.$emit('removeSlice')\n    },\n  },\n}\n</script>\n","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ManageSlice.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ManageSlice.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ManageSlice.vue?vue&type=template&id=41cebdbe&\"\nimport script from \"./ManageSlice.vue?vue&type=script&lang=js&\"\nexport * from \"./ManageSlice.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}