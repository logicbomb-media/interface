{"version":3,"sources":["webpack:///./node_modules/prismjs/plugins/normalize-whitespace/prism-normalize-whitespace.js"],"names":["assign","Object","obj1","obj2","name","hasOwnProperty","NormalizeWhitespace","defaults","this","toCamelCase","value","replace","match","firstChar","toUpperCase","tabLen","str","res","i","length","charCodeAt","prototype","setDefaults","normalize","input","settings","methodName","call","leftTrim","rightTrim","tabsToSpaces","spaces","Array","join","spacesToTabs","RegExp","removeTrailing","removeInitialLineFeed","removeIndent","indents","sort","a","b","indent","tabs","breakLines","characters","lines","split","line","len","j","tl","module","exports","Prism","plugins","hooks","add","env","Normalizer","util","isActive","element","parentNode","code","pre","nodeName","toLowerCase","children","childNodes","before","after","codeFound","node","nodeValue","removeChild","KeepMarkup","html","innerHTML","textContent"],"mappings":"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","file":"js/chunk-2d0db248.2b0ed074.js","sourcesContent":["(function() {\n\nvar assign = Object.assign || function (obj1, obj2) {\n\tfor (var name in obj2) {\n\t\tif (obj2.hasOwnProperty(name))\n\t\t\tobj1[name] = obj2[name];\n\t}\n\treturn obj1;\n}\n\nfunction NormalizeWhitespace(defaults) {\n\tthis.defaults = assign({}, defaults);\n}\n\nfunction toCamelCase(value) {\n\treturn value.replace(/-(\\w)/g, function(match, firstChar) {\n\t\treturn firstChar.toUpperCase();\n\t});\n}\n\nfunction tabLen(str) {\n\tvar res = 0;\n\tfor (var i = 0; i < str.length; ++i) {\n\t\tif (str.charCodeAt(i) == '\\t'.charCodeAt(0))\n\t\t\tres += 3;\n\t}\n\treturn str.length + res;\n}\n\nNormalizeWhitespace.prototype = {\n\tsetDefaults: function (defaults) {\n\t\tthis.defaults = assign(this.defaults, defaults);\n\t},\n\tnormalize: function (input, settings) {\n\t\tsettings = assign(this.defaults, settings);\n\n\t\tfor (var name in settings) {\n\t\t\tvar methodName = toCamelCase(name);\n\t\t\tif (name !== \"normalize\" && methodName !== 'setDefaults' &&\n\t\t\t\t\tsettings[name] && this[methodName]) {\n\t\t\t\tinput = this[methodName].call(this, input, settings[name]);\n\t\t\t}\n\t\t}\n\n\t\treturn input;\n\t},\n\n\t/*\n\t * Normalization methods\n\t */\n\tleftTrim: function (input) {\n\t\treturn input.replace(/^\\s+/, '');\n\t},\n\trightTrim: function (input) {\n\t\treturn input.replace(/\\s+$/, '');\n\t},\n\ttabsToSpaces: function (input, spaces) {\n\t\tspaces = spaces|0 || 4;\n\t\treturn input.replace(/\\t/g, new Array(++spaces).join(' '));\n\t},\n\tspacesToTabs: function (input, spaces) {\n\t\tspaces = spaces|0 || 4;\n\t\treturn input.replace(RegExp(' {' + spaces + '}', 'g'), '\\t');\n\t},\n\tremoveTrailing: function (input) {\n\t\treturn input.replace(/\\s*?$/gm, '');\n\t},\n\t// Support for deprecated plugin remove-initial-line-feed\n\tremoveInitialLineFeed: function (input) {\n\t\treturn input.replace(/^(?:\\r?\\n|\\r)/, '');\n\t},\n\tremoveIndent: function (input) {\n\t\tvar indents = input.match(/^[^\\S\\n\\r]*(?=\\S)/gm);\n\n\t\tif (!indents || !indents[0].length)\n\t\t\treturn input;\n\n\t\tindents.sort(function(a, b){return a.length - b.length; });\n\n\t\tif (!indents[0].length)\n\t\t\treturn input;\n\n\t\treturn input.replace(RegExp('^' + indents[0], 'gm'), '');\n\t},\n\tindent: function (input, tabs) {\n\t\treturn input.replace(/^[^\\S\\n\\r]*(?=\\S)/gm, new Array(++tabs).join('\\t') + '$&');\n\t},\n\tbreakLines: function (input, characters) {\n\t\tcharacters = (characters === true) ? 80 : characters|0 || 80;\n\n\t\tvar lines = input.split('\\n');\n\t\tfor (var i = 0; i < lines.length; ++i) {\n\t\t\tif (tabLen(lines[i]) <= characters)\n\t\t\t\tcontinue;\n\n\t\t\tvar line = lines[i].split(/(\\s+)/g),\n\t\t\t    len = 0;\n\n\t\t\tfor (var j = 0; j < line.length; ++j) {\n\t\t\t\tvar tl = tabLen(line[j]);\n\t\t\t\tlen += tl;\n\t\t\t\tif (len > characters) {\n\t\t\t\t\tline[j] = '\\n' + line[j];\n\t\t\t\t\tlen = tl;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlines[i] = line.join('');\n\t\t}\n\t\treturn lines.join('\\n');\n\t}\n};\n\n// Support node modules\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = NormalizeWhitespace;\n}\n\n// Exit if prism is not loaded\nif (typeof Prism === 'undefined') {\n\treturn;\n}\n\nPrism.plugins.NormalizeWhitespace = new NormalizeWhitespace({\n\t'remove-trailing': true,\n\t'remove-indent': true,\n\t'left-trim': true,\n\t'right-trim': true,\n\t/*'break-lines': 80,\n\t'indent': 2,\n\t'remove-initial-line-feed': false,\n\t'tabs-to-spaces': 4,\n\t'spaces-to-tabs': 4*/\n});\n\nPrism.hooks.add('before-sanity-check', function (env) {\n\tvar Normalizer = Prism.plugins.NormalizeWhitespace;\n\n\t// Check settings\n\tif (env.settings && env.settings['whitespace-normalization'] === false) {\n\t\treturn;\n\t}\n\n\t// Check classes\n\tif (!Prism.util.isActive(env.element, 'whitespace-normalization', true)) {\n\t\treturn;\n\t}\n\n\t// Simple mode if there is no env.element\n\tif ((!env.element || !env.element.parentNode) && env.code) {\n\t\tenv.code = Normalizer.normalize(env.code, env.settings);\n\t\treturn;\n\t}\n\n\t// Normal mode\n\tvar pre = env.element.parentNode;\n\tif (!env.code || !pre || pre.nodeName.toLowerCase() !== 'pre') {\n\t\treturn;\n\t}\n\n\tvar children = pre.childNodes,\n\t    before = '',\n\t    after = '',\n\t    codeFound = false;\n\n\t// Move surrounding whitespace from the <pre> tag into the <code> tag\n\tfor (var i = 0; i < children.length; ++i) {\n\t\tvar node = children[i];\n\n\t\tif (node == env.element) {\n\t\t\tcodeFound = true;\n\t\t} else if (node.nodeName === \"#text\") {\n\t\t\tif (codeFound) {\n\t\t\t\tafter += node.nodeValue;\n\t\t\t} else {\n\t\t\t\tbefore += node.nodeValue;\n\t\t\t}\n\n\t\t\tpre.removeChild(node);\n\t\t\t--i;\n\t\t}\n\t}\n\n\tif (!env.element.children.length || !Prism.plugins.KeepMarkup) {\n\t\tenv.code = before + env.code + after;\n\t\tenv.code = Normalizer.normalize(env.code, env.settings);\n\t} else {\n\t\t// Preserve markup for keep-markup plugin\n\t\tvar html = before + env.element.innerHTML + after;\n\t\tenv.element.innerHTML = Normalizer.normalize(html, env.settings);\n\t\tenv.code = env.element.textContent;\n\t}\n});\n\n}());\n"],"sourceRoot":""}